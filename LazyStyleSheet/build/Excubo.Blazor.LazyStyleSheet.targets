<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!-- default values -->
    <LazyStyleSheets_StaticAssetFolder Condition=" '$(LazyStyleSheets_StaticAssetFolder)' == '' ">wwwroot</LazyStyleSheets_StaticAssetFolder>
    <LazyStyleSheets_ComponentStyleFolder Condition=" '$(LazyStyleSheets_ComponentStyleFolder)' == '' ">css/components</LazyStyleSheets_ComponentStyleFolder>
    <LazyStyleSheets_UseMinifiedStyleSheets Condition=" '$(LazyStyleSheets_UseMinifiedStyleSheets)' == '' ">true</LazyStyleSheets_UseMinifiedStyleSheets>
    <LazyStyleSheets_UseGzippedStyleSheets Condition=" '$(LazyStyleSheets_UseGzippedStyleSheets)' == '' ">false</LazyStyleSheets_UseGzippedStyleSheets>
    <LazyStyleSheets_UseWebCompiler Condition=" '$(LazyStyleSheets_UseWebCompiler)' == '' ">true</LazyStyleSheets_UseWebCompiler>
    <LazyStyleSheets_AutoInject Condition=" '$(LazyStyleSheets_AutoInject)' == '' ">true</LazyStyleSheets_AutoInject>
  </PropertyGroup>

  <Target Name="EnsureComponentStyleFolderExists" BeforeTargets="MoveCss">
    <MakeDir Directories="$(LazyStyleSheets_StaticAssetFolder)/$(LazyStyleSheets_ComponentStyleFolder)" ContinueOnError="true"/>
  </Target>
  <Target Name="MoveCss" BeforeTargets="BeforeBuild">
    <!-- Step1: moving scss or css files that are declared together with razor components to the static asset folder (usually wwwroot) -->
    <ItemGroup>
      <ComponentStyles Include="**\*.razor.css;**\*.razor.scss" Exclude="$(LazyStyleSheets_StaticAssetFolder)\**" />
      <ObsoleteComponentStylesInTargetDir Include="$(LazyStyleSheets_StaticAssetFolder)/$(LazyStyleSheets_ComponentStyleFolder)\**\*" Exclude="@(ComponentStyles->'$(LazyStyleSheets_StaticAssetFolder)/$(LazyStyleSheets_ComponentStyleFolder)\%(RecursiveDir)%(Filename)%(Extension)');@(ComponentStyles->'$(LazyStyleSheets_StaticAssetFolder)/$(LazyStyleSheets_ComponentStyleFolder)\%(RecursiveDir)%(Filename).css');@(ComponentStyles->'$(LazyStyleSheets_StaticAssetFolder)/$(LazyStyleSheets_ComponentStyleFolder)\%(RecursiveDir)%(Filename).min.css');@(ComponentStyles->'$(LazyStyleSheets_StaticAssetFolder)/$(LazyStyleSheets_ComponentStyleFolder)\%(RecursiveDir)%(Filename).min.css.gz');" />
    </ItemGroup>
    <Message Text="Deleting obsolete files in folder $(LazyStyleSheets_StaticAssetFolder)/$(LazyStyleSheets_ComponentStyleFolder): @(ObsoleteComponentStylesInTargetDir)" Condition="'@(ObsoleteComponentStylesInTargetDir)' != ''" Importance="high" />
    <Delete Files="@(ObsoleteComponentStylesInTargetDir)" />
    <Copy SourceFiles="@(ComponentStyles)" DestinationFiles="@(ComponentStyles->'$(LazyStyleSheets_StaticAssetFolder)/$(LazyStyleSheets_ComponentStyleFolder)\%(RecursiveDir)%(Filename)%(Extension)')" SkipUnchangedFiles="true" />
  </Target>

  <Target Name="TestWebCompiler" AfterTargets="MoveCss" Condition=" '$(LazyStyleSheets_UseWebCompiler)' != 'false' ">
    <!-- Test if Excubo.WebCompiler is installed (recommended) -->
    <Exec Command="webcompiler -h" ContinueOnError="true" StandardOutputImportance="low" StandardErrorImportance="low" LogStandardErrorAsError="false" IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
  </Target>

  <Target Name="CompileCss" AfterTargets="MoveCss;TestWebCompiler" Condition=" ('$(ErrorCode)' == '0') And ('$(LazyStyleSheets_UseWebCompiler)' != 'false') ">
    <!-- Compile all static component assets, if webcompiler is installed -->
    <Exec Command="webcompiler -r $(LazyStyleSheets_StaticAssetFolder)/$(LazyStyleSheets_ComponentStyleFolder)" />
  </Target>
  <Target Name="DontCompileCss" AfterTargets="MoveCss;TestWebCompiler" Condition=" ('$(ErrorCode)' != '0') And ('$(LazyStyleSheets_UseWebCompiler)' != 'false') ">
    <!-- Warn the user that webcompiler is not installed -->
    <Message Text="Could not compile static resources. Please install webcompiler with dotnet tool install -g Excubo.WebCompiler" Importance="normal" />
  </Target>

  <Target Name="InjectOneStyleSheetService" Condition=" '$(CurrentFile)' != '' ">
    <!-- Create the injection code for the syle sheet service. Requires that the namespace corresponds to the folder hierarchy -->
    <PropertyGroup>
      <!--The directory of the current file-->
      <TMP__Directory>$([System.String]::Copy($([System.IO.Path]::GetDirectoryName('$(CurrentFile)'))).Replace('\', '/'))</TMP__Directory>
      <!--If this is not the root, we need to prefix this with a forward slash-->
      <TMP__DirectoryWithPrefix Condition="'$(TMP__Directory)' == ''"></TMP__DirectoryWithPrefix>
      <TMP__DirectoryWithPrefix Condition="'$(TMP__Directory)' != ''">/$(TMP__Directory)</TMP__DirectoryWithPrefix>
      <!--The namespace path part is the directory where every forward slash is replaced by a period -->
      <TMP__Namespace>$([System.String]::Copy('$(TMP__DirectoryWithPrefix)').Replace('/','.'))</TMP__Namespace>
      <TMP__Class>$([System.IO.Path]::GetFilename('$(CurrentFile)').Substring(0, $([System.IO.Path]::GetFilename('$(CurrentFile)').IndexOf('.razor'))))</TMP__Class>
      <TMP__File>$([System.IO.Path]::GetFilenameWithoutExtension('$(CurrentFile)'))</TMP__File>
      <TMP__Extension Condition=" ('$(LazyStyleSheets_UseMinifiedStyleSheets)' == 'false') And ('$(LazyStyleSheets_UseGzippedStyleSheets)' == 'false') ">css</TMP__Extension>
      <TMP__Extension Condition=" ('$(LazyStyleSheets_UseMinifiedStyleSheets)' != 'false') And ('$(LazyStyleSheets_UseGzippedStyleSheets)' == 'false') ">min.css</TMP__Extension>
      <TMP__Extension Condition=" ('$(LazyStyleSheets_UseMinifiedStyleSheets)' == 'false') And ('$(LazyStyleSheets_UseGzippedStyleSheets)' != 'false') ">css.gz</TMP__Extension>
      <TMP__Extension Condition=" ('$(LazyStyleSheets_UseMinifiedStyleSheets)' != 'false') And ('$(LazyStyleSheets_UseGzippedStyleSheets)' != 'false') ">min.css.gz</TMP__Extension>
      <TMP__RequestPath>$(LazyStyleSheets_ComponentStyleFolder)$(TMP__DirectoryWithPrefix)/$(TMP__File).$(TMP__Extension)</TMP__RequestPath>
    </PropertyGroup>
    <WriteLinesToFile File="$(IntermediateOutputPath)StyleSheetInjection\$(CurrentFile).g.cs" WriteOnlyWhenDifferent="true" Overwrite="true" Lines="
      using Microsoft.JSInterop%3b;
      namespace $(RootNamespace)$(TMP__Namespace);
      {;
        public partial class $(TMP__Class);
        {;
          [global::Microsoft.AspNetCore.Components.Inject];
          IJSRuntime excubo_style_sheet_injection_js;
          {;
            get =&gt; null%3b;
            set;
            {;
              var src = &quot;$(TMP__RequestPath)&quot;%3b;
              var condition = $&quot;document.head.querySelector(`[href='{src}']`) == null&quot;%3b;
              var action = $&quot;let s = document.createElement('link')%3b s.setAttribute('rel', 'stylesheet')%3b s.setAttribute('href', '{src}')%3b document.head.appendChild(s)%3b&quot;%3b;
              try {value.InvokeVoidAsync(&quot;eval&quot;, $&quot;if ({condition}) {{ {action} }}&quot;)%3b;} catch {};
            };
          };
        };
      };
      ">
    </WriteLinesToFile>
  </Target>

  <Target Name="InjectStyleSheetService" AfterTargets="MoveCss;CompileCss;DontCompileCss" BeforeTargets="CompileCore" Condition=" '$(LazyStyleSheets_AutoInject)' != 'false' ">
    <!-- Inject StyleSheetService into all components that have a style sheet associated with them -->
    <ItemGroup>
      <ComponentStyles Include="**\*.razor.css;**\*.razor.scss" Exclude="$(LazyStyleSheets_StaticAssetFolder)\**" />
    </ItemGroup>
    <MSBuild Projects="$(MSBuildProjectFile)" Properties="CurrentFile=%(ComponentStyles.Identity)" Targets="InjectOneStyleSheetService" />
    <ItemGroup>
      <Compile Include="$(IntermediateOutputPath)StyleSheetInjection\**\*.g.cs" />
    </ItemGroup>
  </Target>

  <Target Name="CleanInjectStyleSheetService" AfterTargets="CoreClean">
    <RemoveDir Directories="$(IntermediateOutputPath)StyleSheetInjection" />
  </Target>
</Project>